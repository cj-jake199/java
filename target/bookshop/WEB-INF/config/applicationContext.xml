<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
     http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
     http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">
    <!--是用于激活那些已经在spring容器里注册过的bean（无论是通过xml的方式还是通过package sanning的方式）上面的注解。-->
    <context:annotation-config />


  <!--扫描全部，除了org.springframework.stereotype.Controller，和servlet.xml，相反-->
    <!--component-scan 在指定的package下扫描以及注册javabean-->
    <!--希望spring管理控制所有业务逻辑组件，等-->
    <context:component-scan base-package="com.bookshop">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!--引入数据库配置文件-->
    <!--Sping用来控制业务逻辑、数据源、事务控制、aop-->
   <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
   <property name="jdbcUrl" value="jdbc:mysql://10.211.55.3:3306/xxshop?characterEncoding=utf-8"></property>
   <property name="driverClass" value="com.mysql.jdbc.Driver"></property>
   <property name="user" value="root"></property>
   <property name="password" value="989898"></property>
   </bean>

    <!-- 事务管理器transaction manager, use DataSourceTransactionManager" for JDBC local tx -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--开启基于注释事务-->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

   <!--整合Mybatis
   目的1：让Spring来管理所有组件，mapper的实现类
    service==>dao  @AutoWired：自动注入mapper(翻译：自动连线)
   目的2：spring用来管理事物
   -->
    <!-- define the SqlSessionFactory -->
    <!--会创建出sqlSessionFactory对象（object）-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!--指定Mybatis配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <property name="typeAliasesPackage" value="org.mybatis.jpetstore.domain" />
        <!--指定mapper文件-->
        <property name="mapperLocations" value="/WEB-INF/config/mapper/**Mapper.xml"></property>
    </bean>

    <!--扫描所有mapper接口的实现，让这些mapper自动注入-->
    <!--base-package 指定mapper命名包-->
    <mybatis:scan base-package="com.bookshop.dao" />


</beans>